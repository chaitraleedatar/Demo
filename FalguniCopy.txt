
    Time complexity is a function describing the amount of time an algorithm takes in terms of the amount of input to the algorithm.
 "Time" can mean the number of memory accesses performed, the number of comparisons between integers, the number of times some inner 
loop is executed, or some other natural unit related to the amount of real time the algorithm will take. We try to keep this idea of time
 separate from "wall clock" time, since many factors unrelated to the algorithm itself can affect the real time (like the language used, 
type of computing hardware, proficiency of the programmer, optimization in the compiler, etc.). It turns out that, if we chose the units
 wisely, all of the other stuff doesn't matter and we can get an independent measure of the efficiency of the algorithm.

    Space complexity is a function describing the amount of memory (space) an algorithm takes in terms of the amount of input to the
 algorithm. We often speak of "extra" memory needed, not counting the memory needed to store the input itself. Again, we use natural 
(but fixed-length) units to measure this. We can use bytes, but it's easier to use, say, number of integers used, number of fixed-sized 
structures, etc. In the end, the function we come up with will be independent of the actual number of bytes needed to represent the unit.
 Space complexity is sometimes ignored because the space used is minimal and/or obvious, but sometimes it becomes as important an issue 
as time. 